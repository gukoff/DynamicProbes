//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool on and at:
//     Thu, 19 Sep 2024 10:27:17 +02:00
//
//     Changes to this file will be lost if the code is re-generated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable // required for auto-generated sources (see below why)

// > Older code generation strategies may not be nullable aware. Setting the
// > project-level nullable context to "enable" could result in many
// > warnings that a user is unable to fix. To support this scenario any syntax
// > tree that is determined to be generated will have its nullable state
// > implicitly set to "disable", regardless of the overall project state.
//
// Source: https://github.com/dotnet/roslyn/blob/70e158ba6c2c99bd3c3fc0754af0dbf82a6d353d/docs/features/nullable-reference-types.md#generated-code

using static Libstapsdt.Libstapsdt;

namespace DynamicProbes;

partial record struct Probe
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe? Active => IsEnabled ? this : null;

    public void Fire()
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe AddProbe(string name)
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name));
    }
}

partial record struct Probe<T>
    where T : IFireArgLong
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe<T>? Active => IsEnabled ? this : null;

    public void Fire(T arg)
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe, arg.UncheckedValue);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe<T> AddProbe<T>(string name)
        where T : IArgType, IFireArgLong
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name, (Libstapsdt.ArgType)T.ArgType));
    }
}

partial record struct Probe<T1, T2>
    where T1 : IFireArgLong
    where T2 : IFireArgLong
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe<T1, T2>? Active => IsEnabled ? this : null;

    public void Fire(T1 arg1, T2 arg2)
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe, arg1.UncheckedValue, arg2.UncheckedValue);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe<T1, T2> AddProbe<T1, T2>(string name)
        where T1 : IArgType, IFireArgLong
        where T2 : IArgType, IFireArgLong
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name, (Libstapsdt.ArgType)T1.ArgType, (Libstapsdt.ArgType)T2.ArgType));
    }
}

partial record struct Probe<T1, T2, T3>
    where T1 : IFireArgLong
    where T2 : IFireArgLong
    where T3 : IFireArgLong
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe<T1, T2, T3>? Active => IsEnabled ? this : null;

    public void Fire(T1 arg1, T2 arg2, T3 arg3)
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe, arg1.UncheckedValue, arg2.UncheckedValue, arg3.UncheckedValue);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe<T1, T2, T3> AddProbe<T1, T2, T3>(string name)
        where T1 : IArgType, IFireArgLong
        where T2 : IArgType, IFireArgLong
        where T3 : IArgType, IFireArgLong
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name, (Libstapsdt.ArgType)T1.ArgType, (Libstapsdt.ArgType)T2.ArgType, (Libstapsdt.ArgType)T3.ArgType));
    }
}

partial record struct Probe<T1, T2, T3, T4>
    where T1 : IFireArgLong
    where T2 : IFireArgLong
    where T3 : IFireArgLong
    where T4 : IFireArgLong
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe<T1, T2, T3, T4>? Active => IsEnabled ? this : null;

    public void Fire(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe, arg1.UncheckedValue, arg2.UncheckedValue, arg3.UncheckedValue, arg4.UncheckedValue);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe<T1, T2, T3, T4> AddProbe<T1, T2, T3, T4>(string name)
        where T1 : IArgType, IFireArgLong
        where T2 : IArgType, IFireArgLong
        where T3 : IArgType, IFireArgLong
        where T4 : IArgType, IFireArgLong
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name, (Libstapsdt.ArgType)T1.ArgType, (Libstapsdt.ArgType)T2.ArgType, (Libstapsdt.ArgType)T3.ArgType, (Libstapsdt.ArgType)T4.ArgType));
    }
}

partial record struct Probe<T1, T2, T3, T4, T5>
    where T1 : IFireArgLong
    where T2 : IFireArgLong
    where T3 : IFireArgLong
    where T4 : IFireArgLong
    where T5 : IFireArgLong
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe<T1, T2, T3, T4, T5>? Active => IsEnabled ? this : null;

    public void Fire(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe, arg1.UncheckedValue, arg2.UncheckedValue, arg3.UncheckedValue, arg4.UncheckedValue, arg5.UncheckedValue);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe<T1, T2, T3, T4, T5> AddProbe<T1, T2, T3, T4, T5>(string name)
        where T1 : IArgType, IFireArgLong
        where T2 : IArgType, IFireArgLong
        where T3 : IArgType, IFireArgLong
        where T4 : IArgType, IFireArgLong
        where T5 : IArgType, IFireArgLong
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name, (Libstapsdt.ArgType)T1.ArgType, (Libstapsdt.ArgType)T2.ArgType, (Libstapsdt.ArgType)T3.ArgType, (Libstapsdt.ArgType)T4.ArgType, (Libstapsdt.ArgType)T5.ArgType));
    }
}

partial record struct Probe<T1, T2, T3, T4, T5, T6>
    where T1 : IFireArgLong
    where T2 : IFireArgLong
    where T3 : IFireArgLong
    where T4 : IFireArgLong
    where T5 : IFireArgLong
    where T6 : IFireArgLong
{
    readonly Provider provider;
    readonly nint probe;

    internal Probe(Provider provider, string name, IntPtr probe)
    {
        this.provider = provider;
        Name = name;
        this.probe = probe;
    }

    public string Name { get; }

    bool IsProviderLoaded => this.provider.IsLoaded;

    public bool IsEnabled => IsProviderLoaded && ProbeIsEnabled(this.probe);

    public Probe<T1, T2, T3, T4, T5, T6>? Active => IsEnabled ? this : null;

    public void Fire(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    {
        if (!IsProviderLoaded)
            return;
        ProbeFire(this.probe, arg1.UncheckedValue, arg2.UncheckedValue, arg3.UncheckedValue, arg4.UncheckedValue, arg5.UncheckedValue, arg6.UncheckedValue);
    }

    public override string ToString() => $"{provider}:{Name}";
}

partial class Provider
{
    public Probe<T1, T2, T3, T4, T5, T6> AddProbe<T1, T2, T3, T4, T5, T6>(string name)
        where T1 : IArgType, IFireArgLong
        where T2 : IArgType, IFireArgLong
        where T3 : IArgType, IFireArgLong
        where T4 : IArgType, IFireArgLong
        where T5 : IArgType, IFireArgLong
        where T6 : IArgType, IFireArgLong
    {
        var @this = This;
        return new(@this, name, Libstapsdt.Libstapsdt.ProviderAddProbe(@this, name, (Libstapsdt.ArgType)T1.ArgType, (Libstapsdt.ArgType)T2.ArgType, (Libstapsdt.ArgType)T3.ArgType, (Libstapsdt.ArgType)T4.ArgType, (Libstapsdt.ArgType)T5.ArgType, (Libstapsdt.ArgType)T6.ArgType));
    }
}
